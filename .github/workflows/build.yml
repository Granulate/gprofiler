name: Build and test gprofiler distributions

on:
  pull_request:
  push:
    tags:
      - '**'

jobs:
  build-docker:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get and verify tag value
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          ./cmp_tags.sh
          echo "GH_REPO=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Cache Docker Layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.GH_REPO }}:latest,${{ env.GH_REPO }}:${{ env.RELEASE_VERSION }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  build-executable:
   runs-on: ubuntu-20.04
   steps:
     - name: Checkout Code
       uses: actions/checkout@v2
       with:
         fetch-depth: 0
     - name: Get and verify tag value
       run: |
         echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
         ./cmp_tags.sh

     - name: Cache Docker Layers
       uses: satackey/action-docker-layer-caching@v0.0.11
       continue-on-error: true

     - name: Run Pyinstaller
       # Not using DOCKER_BUILDKIT=1 since it has another cache mechanism which is not supported by satackey/action-docker-layer-caching@v0.0.11
       # We tried to cache using buildx cache (cache-from, cache-to flags) and got strange behavior when caching,
       # decided not to use buildkit here to get nice caches.
       run: |
        docker build -t gprofiler-executable-builder -f - . < pyi.Dockerfile
        docker container create --name gprofiler-executable-builder gprofiler-executable-builder
        mkdir -p dist/
        docker cp gprofiler-executable-builder:/gprofiler dist/gprofiler
        docker rm gprofiler-executable-builder

     - name: Upload the executable as job artifact
       uses: actions/upload-artifact@v2
       with:
         name: gprofiler
         path: dist/
         retention-days: 1

     - name: Move cache
       run: |
         rm -rf /tmp/.buildx-cache
         mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test-executable:
    needs: build-executable
    strategy:
      fail-fast: false
      matrix:
        containers:
          # TODO alpine doesn't work, I get FileNotFoundError: [Errno 2] No such file or directory: '/tmp/_MEIMV2FRL/gprofiler/resources/java/jattach',
          # which is probably due to the musl ld.so being used instead of the glibc one jattach was built for.
          # we can force the use the glibc ld.so (like used for PyPerf, see get_pyperf_cmd) but in general we need a distribution of
          # async-profiler compiled for musl (because libasyncProfiler.so itself is to be loaded to musl-based processes).
          # The Python process seems like it's not being identified.
          # - alpine
          - ubuntu:14.04
          - ubuntu:16.04
          - ubuntu:18.04
          - ubuntu:20.04
          - ubuntu:20.10
          - centos:7
          - centos:8
          - debian:8
          - debian:9
          - debian:10
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.8

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.275'
          java-package: jdk
          architecture: x64

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Download the executable from previous job
        uses: actions/download-artifact@v2
        with:
          name: gprofiler
          path: dist/

      - name: Run gProfiler tests
        run: |
          chmod +x dist/gprofiler
          NO_APT_INSTALL=1 ./tests/test.sh --exec-container-image ${{ matrix.containers }} --executable dist/gprofiler -k test_executable


  deploy-executable:
    if: startsWith(github.ref, 'refs/tags/')
    needs: test-executable
    runs-on: ubuntu-20.04

    steps:
      - name: Download the executable from previous job
        uses: actions/download-artifact@v2
        with:
          name: gprofiler
          path: dist/
      - name: Get tag value
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/gprofiler
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
